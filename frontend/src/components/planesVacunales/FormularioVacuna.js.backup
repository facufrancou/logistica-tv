import React, { useEffect, useState, useContext } from "react";
import {
  crearVacuna,
  actualizarVacuna,
  getProveedores,
  getPatologias,
  getPresentaciones,
  getViasAplicacion,
  crearPatologia,
  crearPresentacion,
  crearViaAplicacion
} from "../../services/api";
import { AuthContext } from "../../context/AuthContext";

function FormularioVacuna({ vacuna, onClose, onSave, modo = "crear" }) {
  const { usuario } = useContext(AuthContext);
  
  // Estados del formulario
  const [formData, setFormData] = useState({
    codigo: "",
    nombre: "",
    detalle: "",
    id_proveedor: "",
    id_patologia: "",
    id_presentacion: "",
    id_via_aplicacion: "",
    precio_lista: "",
    activa: true
  });

  // Estados para catálogos
  const [proveedores, setProveedores] = useState([]);
  const [patologias, setPatologias] = useState([]);
  const [presentaciones, setPresentaciones] = useState([]);
  const [viasAplicacion, setViasAplicacion] = useState([]);

  // Estados para creación rápida
  const [mostrarCrearPatologia, setMostrarCrearPatologia] = useState(false);
  const [mostrarCrearPresentacion, setMostrarCrearPresentacion] = useState(false);
  const [mostrarCrearVia, setMostrarCrearVia] = useState(false);

  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    cargarCatalogos();
    if (vacuna && modo === "editar") {
      setFormData({
        codigo: vacuna.codigo || "",
        nombre: vacuna.nombre || "",
        detalle: vacuna.detalle || "",
        id_proveedor: vacuna.id_proveedor || "",
        id_patologia: vacuna.id_patologia || "",
        id_presentacion: vacuna.id_presentacion || "",
        id_via_aplicacion: vacuna.id_via_aplicacion || "",
        precio_lista: vacuna.precio_lista || "",
        activa: vacuna.activa !== false
      });
    }
  }, [vacuna, modo]);

  const cargarCatalogos = async () => {
    try {
      const [provData, patData, presData, viasData] = await Promise.all([
        getProveedores(),
        getPatologias(),
        getPresentaciones(),
        getViasAplicacion()
      ]);

      setProveedores(provData.data || provData);
      setPatologias(patData.data || patData);
      setPresentaciones(presData.data || presData);
      setViasAplicacion(viasData.data || viasData);
    } catch (error) {
      console.error('Error cargando catálogos:', error);
    }
  };

  const handleChange = (campo, valor) => {
    setFormData(prev => ({ ...prev, [campo]: valor }));
    // Limpiar error cuando el usuario corrige
    if (errors[campo]) {
      setErrors(prev => ({ ...prev, [campo]: null }));
    }
  };

  const validarFormulario = () => {
    const nuevosErrores = {};

    if (!formData.codigo.trim()) nuevosErrores.codigo = "El código es obligatorio";
    if (!formData.nombre.trim()) nuevosErrores.nombre = "El nombre es obligatorio";
    if (!formData.id_proveedor) nuevosErrores.id_proveedor = "Debe seleccionar un proveedor";
    if (!formData.precio_lista || parseFloat(formData.precio_lista) <= 0) {
      nuevosErrores.precio_lista = "El precio debe ser mayor a 0";
    }

    setErrors(nuevosErrores);
    return Object.keys(nuevosErrores).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validarFormulario()) return;

    setLoading(true);
    try {
      const datosVacuna = {
        ...formData,
        precio_lista: parseFloat(formData.precio_lista),
        id_proveedor: parseInt(formData.id_proveedor),
        id_patologia: formData.id_patologia ? parseInt(formData.id_patologia) : null,
        id_presentacion: formData.id_presentacion ? parseInt(formData.id_presentacion) : null,
        id_via_aplicacion: formData.id_via_aplicacion ? parseInt(formData.id_via_aplicacion) : null
      };

      let resultado;
      if (modo === "crear") {
        resultado = await crearVacuna(datosVacuna);
      } else {
        resultado = await actualizarVacuna(vacuna.id_vacuna, datosVacuna);
      }

      if (resultado) {
        onSave && onSave(resultado);
        onClose && onClose();
      }
    } catch (error) {
      console.error('Error guardando vacuna:', error);
    } finally {
      setLoading(false);
    }
  };

  const crearCatalogoRapido = async (tipo, datos) => {
    try {
      let resultado;
      switch (tipo) {
        case 'patologia':
          resultado = await crearPatologia(datos);
          if (resultado) {
            await cargarCatalogos();
            setFormData(prev => ({ ...prev, id_patologia: resultado.id_patologia }));
            setMostrarCrearPatologia(false);
          }
          break;
        case 'presentacion':
          resultado = await crearPresentacion(datos);
          if (resultado) {
            await cargarCatalogos();
            setFormData(prev => ({ ...prev, id_presentacion: resultado.id_presentacion }));
            setMostrarCrearPresentacion(false);
          }
          break;
        case 'via':
          resultado = await crearViaAplicacion(datos);
          if (resultado) {
            await cargarCatalogos();
            setFormData(prev => ({ ...prev, id_via_aplicacion: resultado.id_via_aplicacion }));
            setMostrarCrearVia(false);
          }
          break;
      }
    } catch (error) {
      console.error(`Error creando ${tipo}:`, error);
    }
  };

  return (
    <div className="modal show d-block" tabIndex="-1">
      <div className="modal-dialog modal-xl">
        <div className="modal-content">
          <div className="modal-header bg-primary text-white">
            <h4 className="modal-title mb-0">
              <i className="fas fa-syringe mr-2"></i>
              {modo === "crear" ? "Nueva Vacuna" : "Editar Vacuna"}
            </h4>
            <button
              type="button"
              className="close text-white"
              onClick={onClose}
              style={{ fontSize: "1.5rem", opacity: 0.8 }}
            >
              <span>&times;</span>
            </button>
          </div>

          <form onSubmit={handleSubmit}>
            <div className="modal-body">
              <div className="row">
                {/* Información básica */}
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Código *</label>
                    <input
                      type="text"
                      className={`form-control ${errors.codigo ? 'is-invalid' : ''}`}
                      value={formData.codigo}
                      onChange={(e) => handleChange("codigo", e.target.value)}
                      placeholder="Ej: VAC001"
                    />
                    {errors.codigo && <div className="invalid-feedback">{errors.codigo}</div>}
                  </div>
                </div>

                <div className="col-md-6">
                  <div className="form-group">
                    <label>Precio de Lista *</label>
                    <div className="input-group">
                      <div className="input-group-prepend">
                        <span className="input-group-text">$</span>
                      </div>
                      <input
                        type="number"
                        step="0.01"
                        className={`form-control ${errors.precio_lista ? 'is-invalid' : ''}`}
                        value={formData.precio_lista}
                        onChange={(e) => handleChange("precio_lista", e.target.value)}
                        placeholder="0.00"
                      />
                      {errors.precio_lista && <div className="invalid-feedback">{errors.precio_lista}</div>}
                    </div>
                  </div>
                </div>
              </div>

              <div className="form-group">
                <label>Nombre *</label>
                <input
                  type="text"
                  className={`form-control ${errors.nombre ? 'is-invalid' : ''}`}
                  value={formData.nombre}
                  onChange={(e) => handleChange("nombre", e.target.value)}
                  placeholder="Nombre comercial de la vacuna"
                />
                {errors.nombre && <div className="invalid-feedback">{errors.nombre}</div>}
              </div>

              <div className="form-group">
                <label>Descripción/Detalle</label>
                <textarea
                  className="form-control"
                  rows="2"
                  value={formData.detalle}
                  onChange={(e) => handleChange("detalle", e.target.value)}
                  placeholder="Descripción detallada de la vacuna"
                />
              </div>

              <div className="row">
                {/* Proveedor */}
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Proveedor/Laboratorio *</label>
                    <select
                      className={`form-control ${errors.id_proveedor ? 'is-invalid' : ''}`}
                      value={formData.id_proveedor}
                      onChange={(e) => handleChange("id_proveedor", e.target.value)}
                    >
                      <option value="">Seleccionar proveedor</option>
                      {proveedores.map(prov => (
                        <option key={prov.id_proveedor} value={prov.id_proveedor}>
                          {prov.nombre} - {prov.razon_social}
                        </option>
                      ))}
                    </select>
                    {errors.id_proveedor && <div className="invalid-feedback">{errors.id_proveedor}</div>}
                  </div>
                </div>

                {/* Patología */}
                <div className="col-md-6">
                  <div className="form-group">
                    <label>Patología</label>
                    <div className="input-group">
                      <select
                        className="form-control"
                        value={formData.id_patologia}
                        onChange={(e) => handleChange("id_patologia", e.target.value)}
                      >
                        <option value="">Seleccionar patología</option>
                        {patologias.map(pat => (
                          <option key={pat.id_patologia} value={pat.id_patologia}>
                            {pat.nombre}
                          </option>
                        ))}
                      </select>
                      <div className="input-group-append">
                        <button
                          type="button"
                          className="btn btn-outline-secondary"
                          onClick={() => setMostrarCrearPatologia(true)}
                          title="Crear nueva patología"
                        >
                          +
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="row">
                    {/* Patología */}
                    <div className="col-md-4">
                      <div className="form-group">
                        <label className="font-weight-bold">Patología</label>
                        <div className="input-group">
                          <select
                            className="form-control"
                            value={formData.id_patologia}
                            onChange={(e) => handleChange("id_patologia", e.target.value)}
                          >
                            <option value="">Seleccionar patología</option>
                            {patologias.map(pat => (
                              <option key={pat.id_patologia} value={pat.id_patologia}>
                                {pat.nombre}
                              </option>
                            ))}
                          </select>
                          <div className="input-group-append">
                            <button
                              type="button"
                              className="btn btn-outline-success"
                              onClick={() => setMostrarCrearPatologia(true)}
                              title="Crear nueva patología"
                            >
                              <i className="fas fa-plus"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Presentación */}
                    <div className="col-md-4">
                      <div className="form-group">
                        <label className="font-weight-bold">Presentación</label>
                        <div className="input-group">
                          <select
                            className="form-control"
                            value={formData.id_presentacion}
                            onChange={(e) => handleChange("id_presentacion", e.target.value)}
                          >
                            <option value="">Seleccionar presentación</option>
                            {presentaciones.map(pres => (
                              <option key={pres.id_presentacion} value={pres.id_presentacion}>
                                {pres.nombre} {pres.volumen_dosis && `(${pres.volumen_dosis} ${pres.unidad_medida})`}
                              </option>
                            ))}
                          </select>
                          <div className="input-group-append">
                            <button
                              type="button"
                              className="btn btn-outline-success"
                              onClick={() => setMostrarCrearPresentacion(true)}
                              title="Crear nueva presentación"
                            >
                              <i className="fas fa-plus"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Vía de aplicación */}
                    <div className="col-md-4">
                      <div className="form-group">
                        <label className="font-weight-bold">Vía de Aplicación</label>
                        <div className="input-group">
                          <select
                            className="form-control"
                            value={formData.id_via_aplicacion}
                            onChange={(e) => handleChange("id_via_aplicacion", e.target.value)}
                          >
                            <option value="">Seleccionar vía</option>
                            {viasAplicacion.map(via => (
                              <option key={via.id_via_aplicacion} value={via.id_via_aplicacion}>
                                {via.nombre} ({via.abreviacion})
                              </option>
                            ))}
                          </select>
                          <div className="input-group-append">
                            <button
                              type="button"
                              className="btn btn-outline-success"
                              onClick={() => setMostrarCrearVia(true)}
                              title="Crear nueva vía de aplicación"
                            >
                              <i className="fas fa-plus"></i>
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div className="modal-footer bg-light">
              <button
                type="button"
                className="btn btn-secondary"
                onClick={onClose}
                disabled={loading}
              >
                <i className="fas fa-times mr-2"></i>
                Cancelar
              </button>
              <button
                type="submit"
                className="btn btn-primary"
                disabled={loading}
              >
                {loading ? (
                  <>
                    <div className="spinner-border spinner-border-sm mr-2"></div>
                    Guardando...
                  </>
                ) : (
                  <>
                    <i className="fas fa-save mr-2"></i>
                    {modo === "crear" ? "Crear Vacuna" : "Guardar Cambios"}
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </div>

      {/* Modales para creación rápida */}
      {mostrarCrearPatologia && (
        <CreacionRapidaModal
          tipo="Patología"
          campos={[
            { key: "codigo", label: "Código", required: true },
            { key: "nombre", label: "Nombre", required: true },
            { key: "descripcion", label: "Descripción" }
          ]}
          onSave={(datos) => crearCatalogoRapido('patologia', datos)}
          onClose={() => setMostrarCrearPatologia(false)}
        />
      )}

      {mostrarCrearPresentacion && (
        <CreacionRapidaModal
          tipo="Presentación"
          campos={[
            { key: "codigo", label: "Código", required: true },
            { key: "nombre", label: "Nombre", required: true },
            { key: "unidad_medida", label: "Unidad" },
            { key: "volumen_dosis", label: "Volumen por Dosis", type: "number" }
          ]}
          onSave={(datos) => crearCatalogoRapido('presentacion', datos)}
          onClose={() => setMostrarCrearPresentacion(false)}
        />
      )}

      {mostrarCrearVia && (
        <CreacionRapidaModal
          tipo="Vía de Aplicación"
          campos={[
            { key: "codigo", label: "Código", required: true },
            { key: "nombre", label: "Nombre", required: true },
            { key: "abreviacion", label: "Abreviación" },
            { key: "descripcion", label: "Descripción" }
          ]}
          onSave={(datos) => crearCatalogoRapido('via', datos)}
          onClose={() => setMostrarCrearVia(false)}
        />
      )}
    </div>
  );
}

// Modal para creación rápida de catálogos
function CreacionRapidaModal({ tipo, campos, onSave, onClose }) {
  const [formData, setFormData] = useState({});

  const handleSubmit = (e) => {
    e.preventDefault();
    // Agregar campo activo por defecto
    onSave({ ...formData, activo: true });
  };

  return (
    <div className="modal show d-block" tabIndex="-1" style={{ zIndex: 1060 }}>
      <div className="modal-dialog">
        <div className="modal-content">
          <div className="modal-header">
            <h6 className="modal-title">Crear {tipo}</h6>
            <button type="button" className="close" onClick={onClose}>
              <span>&times;</span>
            </button>
          </div>
          <form onSubmit={handleSubmit}>
            <div className="modal-body">
              {campos.map(campo => (
                <div key={campo.key} className="form-group">
                  <label>
                    {campo.label}
                    {campo.required && <span className="text-danger"> *</span>}
                  </label>
                  <input
                    type={campo.type || "text"}
                    className="form-control"
                    value={formData[campo.key] || ""}
                    onChange={(e) => setFormData(prev => ({ 
                      ...prev, 
                      [campo.key]: e.target.value 
                    }))}
                    required={campo.required}
                  />
                </div>
              ))}
            </div>
            <div className="modal-footer">
              <button type="button" className="btn btn-secondary" onClick={onClose}>
                Cancelar
              </button>
              <button type="submit" className="btn btn-primary">
                Crear {tipo}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}

export default FormularioVacuna;